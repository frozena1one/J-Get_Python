STRING ИЛИ СТРОКОВЫЙ ТИП ДАННЫХ


Строки - это сложный тип данных, представляющий собой последовательность символов.
Строки в python могут заключаться как в одинарные, так и двойные кавычки,
но начало и конец строки должны оформляться одинаковыми кавычками.

На наших занятиях мы уже работали со строками.

Как минимум, когда выводили какое-нибудь сообщение через print.
print('Hello world!')

Также мы вводили строку, присваивая переменной какой-нибудь текст.
text = 'Hello world!'

Также можно ввести текст (строку) пользователю.
string = input('Введите какой-нибудь текст: ')

На этом этапе нужно заметить, что в python всё, что вводится через input автоматически считается строкой,
поэтому не обязательно уточнять, что это строка, хотя стоит уточнять для понимания кода.
В случае с цифрами нужно перед input() напечатать int.
number = int(input('Введите число: '))

В случае с текстом используется str (от слова string, в переводе “строка”)
text = str(input('Введите текст: '))

На самом деле, нет разницы между input() и str(input()) при вводе текста пользователем.
В первом случае вы просто принимаете строку от пользователя, а во втором - принимаете строку и преобразуете её в строку, что бессмысленно.


Функция len().
Существует специальная функция len(), которая позволяет измерить длину строки, т.е. количество символов в строке:
len('Функция измеряет количество символов')

Программа найдет значение 46. Но чтобы вывести это значение, без print() не обойтись.
print(len('Функция измеряет количество символов'))

Такой же результат можно получить, присвоив переменной строку.
string = 'Функция измеряет количество символов'
print(len(string))

Причем надо понимать, что количество символов это не только числа и буквы, которые есть в строке, но и знаки препинания и пробелы.


Индекс.
У каждого символа есть свой порядковый номер - индекс. Можно обратиться к каждому индексу отдельно и извлечь его.
Важный момент - счет начинается с 0. Потому что индекс - это отклонение от первого элемента, чем порядковый номер.

Первый символ будет под индексом 0. Второй индекс будет под индексом 1, потому что он находится в одном шаге от первого элемента.

text = 'джигет'

д  ж  и  г  е  т
0  1  2  3  4  5

text[0] -> 'д'
text[1] -> 'ж'
...
text[5] -> 'т'

Также это работает и в другую сторону.
Можно отклониться от первого элемента в другую сторону, т.е. на (-1)

 д  ж  и  г  е  т
-6 -5 -4 -3 -2 -1

text[-1] -> 'т'
text[-2] -> 'е'
...
text[-6] -> 'д'


Срезы.
Также можно вывести часть текста, указав интервал индексов.

Нужно в квадратных скобках указать промежуток: в начале индекс с которого нужно начать, двоеточие и индекс, которым нужно закончить.
text = 'джигет'
print(x[1:3]) -> 'жиг'

Если не указать первый элемент среза, то срез начинается с первого элемента строки.
Если не указать последний элемент среза, то срез заканчивается последним элементом строки.

print(text[:3]) -> 'джи'
print(text[3:]) -> 'гет'

Также можно получать срез каждого второго символа. В этом случае надо указать шаг, с которым надо двигаться.
print(text[0:5:2]) -> 'дие'