СЛОВАРИ


Словари – изменяемые коллекции элементов с произвольными индексами – ключами.
Если в списках элементы индексируются целыми числами, начиная с 0,
то в словарях — любыми ключами, в том числе в виде строк.

Как нам уже известно, списки — удобный и самый популярный способ хранения большого количества данных в одной переменной.
Списки индексируют все хранящиеся в них элементы, что позволяет быстро обращаться к элементу, зная его индекс.

НО... Что если нам неудобно хранить элементы под численными индексами?
В таких случаях на помощь приходят словари.

Списки индексируются целыми числами, но в этом случае удобно было бы находить информацию не по числу,
а по строке. В списках строки не могут быть индексами, однако в словарях это возможно.

Словарь (тип данных dict), как и список, позволяет хранить много данных.
В отличие от списка, в словаре для каждого элемента можно произвольно определить «индекс» — ключ, по которому он будет доступен.

Чтобы создать словарь, нужно перечислить его элементы – пары ключ-значение – через запятую в фигурных скобках, как и элементы множества.
Первым указывается ключ, после двоеточия — значение, доступное в словаре по этому ключу.

Приведенный ниже код:

languages = {'Python': 'Гвидо ван Россум',
             'C#': 'Андерс Хейлсберг',
             'Java': 'Джеймс Гослинг',
             'C++': 'Бьёрн Страуструп'}
создает словарь, в котором ключом служит строка — название языка программирования, а значением — имя создателя языка.


Извлечь значение элемента словаря можно, обратившись к нему по его ключу.
Чтобы получить значение по заданному ключу, как и в списках, используем квадратные скобки [], индексируем по ключу.

Приведенный ниже код:

languages = {'Python': 'Гвидо ван Россум',
             'C#': 'Андерс Хейлсберг',
             'Java': 'Джеймс Гослинг',
             'C++': 'Бьёрн Страуструп'}

print('Создателем языка C# является', languages['C#'])
выводит:

Создателем языка C# является Андерс Хейлсберг
В отличие от списков, номеров позиций в словарях нет.

Приведенный ниже код:

languages = {'Python': 'Гвидо ван Россум',
             'C#': 'Андерс Хейлсберг',
             'Java': 'Джеймс Гослинг',
             'C++': 'Бьёрн Страуструп'}

print('Создателем языка C# является', languages[1])
приводит к возникновению ошибки KeyError.


Для вывода всего словаря можно использовать функцию print():

languages = {'Python': 'Гвидо ван Россум',
             'C#': 'Андерс Хейлсберг',
             'Java': 'Джеймс Гослинг'}

info = dict(name = 'Timur', age = 28, job = 'Teacher')

print(languages)
print(info)
Функция print() выводит на экран элементы словаря в фигурных скобках, разделенные запятыми:

{'Python': 'Гвидо ван Россум', 'C#': 'Андерс Хейлсберг', 'Java': 'Джеймс Гослинг'}
{'name': 'Timur', 'age': 28, 'job': 'Teacher'}


Чтобы изменить значение по определенному ключу в словаре, достаточно использовать индексацию вместе с оператором присваивания.
При этом если ключ уже присутствует в словаре, его значение заменяется новым,
если же ключ отсутствует – то в словарь будет добавлен новый элемент.

Приведенный ниже код:

info = {'name': 'Sam',
        'age': 28,
        'job': 'Teacher'}

info['name'] = 'Timur'                  # изменяем значение по ключу name
info['email'] = 'timyr-guev@yandex.ru'  # добавляем в словарь элемент с ключом email

print(info)

{'name': 'Timur', 'age': 28, 'job': 'Teacher', 'email': 'timyr-guev@yandex.ru'}


Оператор in позволяет проверить, содержит ли словарь заданный ключ.

Рассмотрим код:

capitals = {'Россия': 'Москва', 'Франция': 'Париж', 'Чехия': 'Прага'}

if 'Франция' in capitals:
    print('Столица Франции - это', capitals['Франция'])
Такой код проверяет, содержит ли словарь capitals элемент с ключом Франция и выводит соответствующий текст:

Столица Франции - это Париж


С помощью оператора del можно удалять элементы словаря по определенному ключу.

Следующий программный код:

info = {'name': 'Sam',
        'age': 28,
        'job': 'Teacher',
        'email': 'timyr-guev@yandex.ru'}

del info['email']    # удаляем элемент имеющий ключ email
del info['job']      # удаляем элемент имеющий ключ job

print(info)
выводит (порядок элементов может отличаться):

{'name': 'Sam', 'age': 28}
​Если удаляемого ключа в словаре нет, возникнет ошибка KeyError.


Перебор элементов словаря осуществляется так же, как перебор элементов списка – с помощью цикла for.

Для вывода ключей словаря каждого на отдельной строке можно использовать следующий код:

capitals = {"Россия": "Москва", "Франция": "Париж", "Чехия": "Прага"}

for key in capitals:
    print(key)
 Такой код выведет (порядок элементов может отличаться):

Россия
Франция
Чехия
Для вывода значений словаря каждого на отдельной строке можно использовать следующий код:

capitals = {"Россия": "Москва", "Франция": "Париж", "Чехия": "Прага"}

for key in capitals:
    print(capitals[key])
 Такой код выведет (порядок элементов может отличаться):

Москва
Париж
Прага
Для вывода элементов словаря каждого на отдельной строке можно использовать следующий код:

capitals = {"Россия": "Москва", "Франция": "Париж", "Чехия": "Прага"}

for key in capitals:
    print("Столица", key, "- это", capitals[key])
Такой код выведет (порядок элементов может отличаться):

Столица Россия - это Москва
Столица Франция - это Париж
Столица Чехия - это Прага